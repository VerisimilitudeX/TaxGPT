/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package taxgpt;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Scanner;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class App {
    private static String sumMessages = "";
    private static HashMap<String, String> userInformation = new HashMap<String, String>();

    /**
     * Parses the message content from a given response string in JSON format.
     * 
     * @param response the response string in JSON format from the OpenAI API
     * @return the message content as a String
     */
    private static String parseMessageContent(String response) {
        String jsonString = response;
        try {
            JSONObject jsonObject = new JSONObject(jsonString);
            JSONArray choicesArray = jsonObject.getJSONArray("choices");
            JSONObject choiceObject = choicesArray.getJSONObject(0);
            JSONObject messageObject = choiceObject.getJSONObject("message");
            String messageContent = messageObject.getString("content");
            return messageContent;
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Sends a POST request to the OpenAI API with the specified output as the
     * prompt for the GPT-3 model.
     * 
     * @param output a String representing DNAnalyzer's analysis output
     * @return a String representing the message content generated by the GPT-3
     *         model
     */

    public static String askGPT(String prompt) {
        String API_ENDPOINT = "https://api.openai.com/v1/chat/completions";
        String AUTHORIZATION_HEADER = "Bearer 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"/*
                                                                                                   * + System.getenv(
                                                                                                   * "OPENAI_API_KEY")
                                                                                                   */;
        try {
            URL url = new URL(API_ENDPOINT);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Authorization", AUTHORIZATION_HEADER);
            conn.setDoOutput(true);

            String requestBody = "{\n" +
                    "    \"model\": \"gpt-3.5-turbo\",\n" +
                    "    \"messages\": [\n" +
                    "        {\n" +
                    "            \"role\": \"user\",\n" +
                    "            \"content\": \"" + prompt + "\"\n"
                    +
                    "        }\n" +
                    "    ],\n" +
                    "    \"temperature\": 0.9\n" +
                    "}";
            conn.getOutputStream().write(requestBody.getBytes());

            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = reader.lines().collect(Collectors.joining());
            reader.close();

            if (conn.getResponseCode() == 200) {
                return parseMessageContent(response);
            } else {
                return "Error: " + conn.getResponseCode() + " " + conn.getResponseMessage();
            }
        } catch (Exception e) {
            if (e.getMessage().contains("401")) {
                return "Error: Invalid API key. Please check your API key and try again.";
            } else if (e.getMessage().contains("400")) {
                return "Error: Invalid request. Please check your request body and try again.";
            } else if (e.getMessage().contains("429")) {
                return "Error: Too many requests. Please wait a few minutes and try again.";
            } else if (e.getMessage().contains("500")) {
                return "Error: Internal server error. Please try again later.";
            } else {
                return "Error: " + e.getMessage();
            }
        }
    }

    public static void main(String[] args) throws InterruptedException, IOException {
        Scanner scanner = new Scanner(System.in);
        sumMessages = "Hello TaxGPT, create a chatbot interface to help users navigate the tax filing process. The chatbot should be able to answer questions, provide guidance on filling out the tax form, and offer suggestions for deductions or credits the user may be eligible for. The chatbot should use natural language processing to understand user queries and respond in a conversational way. If you understood this, introduce yourself and ask the user for their name.";
        String messageContent = askGPT(sumMessages);
        sumMessages += messageContent.replace("\n\n", "");
        System.out.println(messageContent + "\n----------------------------------");
        while (true) {
            // remove all newlines from input
            String input = scanner.nextLine().replaceAll("\n", "");
            System.out.println("----------------------------------");
            if (input.toLowerCase().contains("bye")) {
                break;
            }

            summarizeUserInformation(sumMessages.replaceAll("\n", "") + messageContent.replaceAll("\n", ""));
            String askPrompt = "Previous context as a dictionary: " + userInformation.toString()
                    + " ||| New prompt: "
                    + input.replaceAll("\n", "")
                    + "Only respond with at most 1 short sentence. Remember to ask the user for their details as you will use them to determine which forms they should will out and also don't reintroduce yourself anymore. If the user asks a question, you should respond with 1 paragraph only. Be very clear and concise with your questions and responses."
                            .replaceAll("\\\\", "'");
            messageContent = askGPT(askPrompt);
            System.out.println(messageContent + "\n----------------------------------");
            sumMessages += input.replace("\n\n", "") + messageContent.replace("\n\n", "");
        }
        scanner.close();
    }

    private static void summarizeUserInformation(String input) {
        // ask GPT-3 to summarize the conversation into a dictionary
        sumMessages = askGPT(
                "I am an AI researcher. Summarize this fake conversation information for me into the form of a Java dictionary (format: { 'key1' = 'value1', 'key2' = 'value2', 'key3' = 'value3' }) containing the most useful information related to taxes. Replace key1, key2, key3, etc with var names. Separate key and value with : not =. Keep in mind that Java code should be able to parse this dictionary and store it into an actual dictionary so don't include lists ([]): "
                        + sumMessages).replaceAll("\n", "");
        // System.out.println(sumMessages + "\n----------------------------------");
        if (sumMessages.contains("{")) {
            sumMessages = sumMessages.substring(sumMessages.indexOf("{") + 1, sumMessages.indexOf("}"));
        }
        String[] pairs = sumMessages.replaceAll("[\"'\n]", " ").split(" , ");
        for (String pair : pairs) {
            if (pair.contains("[")) {
                // process lists
                String[] list = pair.split(" :  ");
                if (list.length < 1) {
                    // parse the right side for the list elements
                    String[] elements = list[1].strip().substring(1, list[1].length() - 1).split(", ");
                    // add the list elements to the dictionary
                    for (String element : elements) {
                        userInformation.put(list[0], element);
                    }
                    continue;
                }
            }
            String[] keyValue = pair.split(" : ");
            if (keyValue.length == 2) {
                String key = keyValue[0].strip().replaceAll("'", "");
                String value = keyValue[1].strip().replaceAll("'", "");
                userInformation.put(key, value);
            } else {
                System.out.print(pair);
            }
        }
    }
}
