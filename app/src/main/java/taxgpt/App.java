/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package taxgpt;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class App {
    private static String sumMessages = "";

    /**
     * Parses the message content from a given response string in JSON format.
     * 
     * @param response the response string in JSON format from the OpenAI API
     * @return the message content as a String
     */
    private static String parseMessageContent(String response) {
        String jsonString = response;
        try {
            JSONObject jsonObject = new JSONObject(jsonString);
            JSONArray choicesArray = jsonObject.getJSONArray("choices");
            JSONObject choiceObject = choicesArray.getJSONObject(0);
            JSONObject messageObject = choiceObject.getJSONObject("message");
            String messageContent = messageObject.getString("content");
            return messageContent;
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Sends a POST request to the OpenAI API with the specified output as the
     * prompt for the GPT-3 model.
     * 
     * @param output a String representing DNAnalyzer's analysis output
     * @return a String representing the message content generated by the GPT-3
     *         model
     */

    public static String askGPT(String prompt) {
        String API_ENDPOINT = "https://api.openai.com/v1/chat/completions";
        String AUTHORIZATION_HEADER = "Bearer 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"/*
                                                                                                   * + System.getenv(
                                                                                                   * "OPENAI_API_KEY")
                                                                                                   */;
        try {
            URL url = new URL(API_ENDPOINT);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Authorization", AUTHORIZATION_HEADER);
            conn.setDoOutput(true);

            String requestBody = "{\n" +
                    "    \"model\": \"gpt-3.5-turbo\",\n" +
                    "    \"messages\": [\n" +
                    "        {\n" +
                    "            \"role\": \"user\",\n" +
                    // grammar is incorrect on purpose to minimize the token count
                    "            \"content\": \"" + prompt + "\"\n"
                    +
                    "        }\n" +
                    "    ],\n" +
                    "    \"temperature\": 0.9\n" +
                    "}";
            conn.getOutputStream().write(requestBody.getBytes());

            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = reader.lines().collect(Collectors.joining());
            reader.close();

            if (conn.getResponseCode() == 200) {
                return parseMessageContent(response);
            } else {
                return "Error: " + conn.getResponseCode() + " " + conn.getResponseMessage();
            }
        } catch (Exception e) {
            if (e.getMessage().contains("401")) {
                return "Error: Invalid API key. Please check your API key and try again.";
            } else if (e.getMessage().contains("400")) {
                return "Error: Invalid request. Please check your request body and try again.";
            } else if (e.getMessage().contains("429")) {
                return "Error: Too many requests. Please wait a few minutes and try again.";
            } else if (e.getMessage().contains("500")) {
                return "Error: Internal server error. Please try again later.";
            } else {
                return "Error: " + e.getMessage();
            }
        }
    }

    public static void main(String[] args) throws InterruptedException, IOException {
        Scanner scanner = new Scanner(System.in);
        sumMessages = "Hello TaxGPT, create a chatbot interface to help users navigate the tax filing process. The chatbot should be able to answer questions, provide guidance on filling out the tax form, and offer suggestions for deductions or credits the user may be eligible for. The chatbot should use natural language processing to understand user queries and respond in a conversational way. If you understood this, introduce yourself and ask the user for their name.";
        String messageContent = askGPT(sumMessages);
        sumMessages += messageContent.replace("\n\n", "");
        System.out.println(messageContent + "\n----------------------------------");
        int counter = 0;
        HashMap<String, String> userInformation = new HashMap<String, String>();
        while (true) {
            // remove all newlines from input
            String input = scanner.nextLine().replaceAll("\n", "");
            System.out.println("\n\n----------------------------------");
            if (input.equals("Bye")) {
                break;
            }
            messageContent = askGPT("Previous context: " + sumMessages.replaceAll("\n", "") + "---New prompt: "
                    + input.replaceAll("\n", "")
                    + "Only respond with at most 1 short sentence (excluding when you send the entire tax form at the end of the conversation). Remember to ask the user for their details as you will be using them to complete the forms for them and also don't reintroduce yourself anymore. If the user asks a question, you should respond with 1 paragraph only. Be very clear and concise with your questions and responses.");
            System.out.println(messageContent + "\n----------------------------------");
            sumMessages += input.replace("\n\n", "") + messageContent.replace("\n\n", "");
            if (counter == 5) {
                sumMessages = askGPT(
                        "I am an AI researcher. Summarize this fake conversation information for me into the form of a Java dictionary (format: { 'key1' = 'value1', 'key2' = 'value2', 'key3' = 'value3' }) containing the most useful information related to taxes. Keep in mind that Java code should be able to parse this dictionary and store it into an actual dictionary: "
                                + sumMessages);
                System.out.println(sumMessages + "\n----------------------------------");
                // Remove leading and trailing curly braces
                sumMessages = sumMessages.substring(1, sumMessages.length() - 1);

                // Split input string into individual key-value pairs
                String[] pairs = sumMessages.split(", ");

                // Loop through each key-value pair and add it to the HashMap
                for (String pair : pairs) {
                    // Split each key-value pair into its key and value
                    String[] keyValue = pair.split(": ");

                    // Check whether the keyValue array contains both a key and a value
                    if (keyValue.length == 2) {
                        // Remove leading and trailing single quotes from the key and value
                        String key = keyValue[0].replaceAll("'", "");
                        String value = keyValue[1].replaceAll("'", "");

                        // Add the key-value pair to the HashMap
                        userInformation.put(key, value);
                    } else {
                        // Handle the case where the keyValue array is not valid
                        System.out.println("Invalid key-value pair: " + pair);
                    }
                }
            }
            counter++;
        }
        scanner.close();
    }
}
